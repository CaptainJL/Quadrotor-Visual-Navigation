set(CUDA_USE_STATIC_CUDA_RUNTIME OFF)
cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

rosbuild_init()

# Packages USed
#find_package(OpenCV REQUIRED)
find_package(CUDA REQUIRED)
find_package (Eigen3 REQUIRED)

find_package(OpenCV 3 REQUIRED)
if (${OpenCV_VERSION} MATCHES "3.3.1")
  foreach(__cvcomponent ${OpenCV_LIB_COMPONENTS})
    set (__original_cvcomponent ${__cvcomponent})
    if(NOT __cvcomponent MATCHES "^opencv_")
      set(__cvcomponent opencv_${__cvcomponent})
    endif()
    if (TARGET ${__cvcomponent})
      set_target_properties(${__cvcomponent} PROPERTIES
          MAP_IMPORTED_CONFIG_DEBUG ""
          MAP_IMPORTED_CONFIG_RELEASE ""
          MAP_IMPORTED_CONFIG_RELWITHDEBINFO ""
          MAP_IMPORTED_CONFIG_MINSIZEREL ""
      )
    endif()
  endforeach(__cvcomponent)
endif()



# Includes Used
include_directories(${OpenCV_INCLUDE_DIRS})
include_directories(/opt/mvIMPACT_acquire)	# not for tx2
#include_directories(/opt/mvIMPACT_acquire)
include_directories(${CUDA_INCLUDE_DIRS})
include_directories ( ${EIGEN3_INCLUDE_DIR} )

set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

# C++11 Declaration
set (CMAKE_CXX_FLAGS "-std=c++11")


set(
    CUDA_NVCC_FLAGS
    ${CUDA_NVCC_FLAGS};
    -O3 -lineinfo
    -gencode=arch=compute_62,code=sm_62
    )

# CUDA
cuda_add_library(w_flow_gpu SHARED src/gpu_w_flow.cu)

# ROS Main
rosbuild_add_executable(flowcontrol src/cam_cap.cpp src/flowcontrol.cpp) 

# Libs Links
#target_link_libraries(flowcontrol /opt/mvIMPACT_Acquire/lib/arm64/libmvDeviceManager.so ${OpenCV_LIBS} flowfilter_gpu) #cuda_flowctrl
target_link_libraries(flowcontrol w_flow_gpu /opt/mvIMPACT_acquire/lib/x86_64/libmvDeviceManager.so ${OpenCV_LIBS} flowfilter_gpu) #cuda_flowctrl


